class ProfileDecorator < Draper::Base

  # Public: Build an image tag with profiles gravatar url as the source.
  #
  # Returns String HTML image tag.
  def gravatar
    h.image_tag(Gravatar.url(model.gravatar_id), alt: model.username,
                                                 width: 90,
                                                 height: 90,
                                                 class: "img-polaroid")
  end

  private
  # Internal: Extract and memoize GitHub session key/value pairs.
  #
  # Examples
  #
  #   github
  #   # => { :gravatar => "https://1.gravatar.com/avatar/767fc9c115a1b989744c755db47feb60?s=200&r=pg&d=mm" }
  #
  #   github
  #   # => {}
  #
  # Returns Hash of GitHub session.
  def github
    @github ||= if h.user_signed_in?
                  h.session["warden.user.user.session"].fetch(:github, {})
                else
                  {}
                end
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject"s methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => "timestamp"
  #   end
end
